name: LLM Poemer Scheduler

on:
  schedule:
    - cron: "0 * * * *"

  workflow_dispatch:

jobs:
  check-report-times:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check_times.outputs.should-run }}
    steps:
      - name: Determine if report times are set and match current time
        id: check_times
        run: |
          CURRENT_HOUR=$(date -u +'%-H')
          echo "current hour: $CURRENT_HOUR"
          echo "REPORT_TIME_MORNING_UTC: $REPORT_TIME_MORNING_UTC"
          echo "REPORT_TIME_EVENING_UTC: $REPORT_TIME_EVENING_UTC"

          if [ -z "${{ env.REPORT_TIME_MORNING_UTC }}" ] && [ -z "${{ env.REPORT_TIME_EVENING_UTC }}" ]; then
            echo "Report times are not set."
            echo "should-run=false" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_HOUR" != "${{ env.REPORT_TIME_MORNING_UTC }}" ] && [ "$CURRENT_HOUR" != "${{ env.REPORT_TIME_EVENING_UTC }}" ]; then
            echo "Current time does not match report times."
            echo "should-run=false" >> $GITHUB_OUTPUT
          else
            echo "Report times are set and match current time."
            echo "should-run=true" >> $GITHUB_OUTPUT
          fi
        env:
          REPORT_TIME_MORNING_UTC: ${{ vars.REPORT_TIME_MORNING_UTC }}
          REPORT_TIME_EVENING_UTC: ${{ vars.REPORT_TIME_EVENING_UTC }}

  post-poem:
    runs-on: ubuntu-latest
    needs: check-report-times
    if: needs.check-report-times.outputs.should-run == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run script
        run: |
          python main.py ""
        env:
          BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

          AI_ENGINE: ${{ vars.AI_ENGINE }}
          AI_MODEL: ${{ vars.AI_MODEL }}
          BLUESKY_USERNAME: ${{ vars.BLUESKY_USERNAME }}
          SLACK_CHANNEL: ${{ vars.SLACK_CHANNEL }}
